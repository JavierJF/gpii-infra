require "rake/clean"
import "../rakefiles/build.rake"

if ENV["TF_VAR_environment"].nil?
  if ENV["USER"].nil? || ENV["USER"].empty?
    raise "ERROR: Please set $USER (or $TF_VAR_environment, if you're sure you know what you're doing)."
  end
  user = ENV["USER"]
  ENV["TF_VAR_environment"] = "dev-#{user}"
end
if ENV["TF_VAR_cluster_name"].nil?
  ENV["TF_VAR_cluster_name"] = "k8s-#{ENV["TF_VAR_environment"]}.gpii.net"
end
if ENV["RAKE_ENV_SHORT"].nil?
  ENV["RAKE_ENV_SHORT"] = File.basename(File.dirname(__FILE__))
end

if ENV["TMPDIR"].nil?
  ENV["TMPDIR"] = "/tmp"
end
BASE_TMPDIR = ENV["TMPDIR"]
TMPDIR_PREREQS = File.absolute_path("#{ENV["TMPDIR"]}/rake-tmp/#{ENV["TF_VAR_environment"]}-prereqs")
TMPDIR = File.absolute_path("#{ENV["TMPDIR"]}/rake-tmp/#{ENV["TF_VAR_environment"]}")

task :default => :dev
task :destroy => :destroy_dev

task :dev => :generate_modules do
  sh "bundle exec kitchen create -l debug"
  begin
    sh "bundle exec kitchen converge -l debug"
    Rake::Task["wait_for_api"].invoke
    sh "bundle exec kitchen verify -l debug"
  ensure
    Rake::Task["destroy_dev"].invoke
  end
end
CLEAN << "#{TMPDIR}/terragrunt"

task :destroy_dev do
  if ENV["RAKE_DESTROY"]
    sh "bundle exec kitchen destroy -l debug"
    Rake::Task["destroy_prereqs"].invoke
  else
    puts "RAKE_DESTROY is not set so not destroying environment."
    puts "Remember to `RAKE_DESTROY=1 rake destroy` when you're done."
  end
end



# vim: ts=2 sw=2:
