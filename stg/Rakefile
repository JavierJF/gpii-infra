require "rake/clean"
require_relative "../rakefiles/vars.rb"
import "../rakefiles/build.rake"
import "../rakefiles/deploy.rake"

if ENV["RAKE_ENV_SHORT"].nil?
  ENV["RAKE_ENV_SHORT"] = File.basename(File.dirname(__FILE__))
end
setup_vars(ENV["RAKE_ENV_SHORT"])

task :default => :stg

task :stg => [@tmpdir, :generate_modules] do
  sh "terragrunt apply-all --terragrunt-non-interactive"
end
CLEAN << "#{@tmpdir}/terragrunt"

# If user invokes :destroy directly, really destroy.
task :destroy do
  ENV["RAKE_DESTROY"] = "true"
  Rake::Task["destroy_stg"].invoke
end

# It seems weird to depend on :generate_modules, but it is needed for a common
# scenario: CI deploys stg environment, an administrator wants to destroy it
# manually. To do this, modules must generate their terraform code so we can
# run it.
#
# After the second time rake gave me inscrutable errors while trying to delete
# a stg environment that was spun up elsewhere, I added the dependency.
task :destroy_stg => [@tmpdir, :generate_modules] do
  if ENV["RAKE_DESTROY"]
    sh "terragrunt destroy-all --terragrunt-non-interactive"
    Rake::Task["destroy_prereqs"].invoke
  else
    puts "RAKE_DESTROY is not set so not destroying environment."
  end
end


# vim: ts=2 sw=2:
