require "erb"
require "rake/clean"
require "securerandom"
require "yaml"
import "../../rakefiles/prereqs.rake"
require_relative "../../rakefiles/terraform_output.rb"
require_relative "../../rakefiles/vars.rb"

if ENV["RAKE_ENV_SHORT"].nil?
  ENV["RAKE_ENV_SHORT"] = "dev"
end
setup_vars(ENV["RAKE_ENV_SHORT"])

task :default => :generate

PREREQS_DIR = "../../prereqs/#{ENV["RAKE_ENV_SHORT"]}"

desc "Create or update cluster prereqs (e.g DNS for cluster)"
task :apply_prereqs => @tmpdir_prereqs do
  Rake::Task["_apply_prereqs"].invoke(PREREQS_DIR, @tmpdir_prereqs)
end

desc "Destroy cluster prereqs (e.g DNS for cluster)"
task :destroy_prereqs => @tmpdir_prereqs do
  Rake::Task["_destroy_prereqs"].invoke(PREREQS_DIR, @tmpdir_prereqs)
end

task :setup_prereqs_output => :apply_prereqs do
  @prereqs_output = terraform_output(PREREQS_DIR, @tmpdir_prereqs)
end

DEPLOY_OUT_DIR = "#{@tmpdir}-modules/deploy"
directory DEPLOY_OUT_DIR
CLOBBER << DEPLOY_OUT_DIR

task :setup_versions do
  version_yml = File.read("./version.yml")
  @versions = YAML.load(version_yml)
end

task :setup_secrets do
  @secrets = Hash.new
  if ENV["COUCHDB_USER"].nil?
    puts "WARNING: setting 'couchdb_user' to default, don't use it at production"
    @secrets[:couchdb_user] = "gpii"
  else
    @secrets[:couchdb_user] = ENV["COUCHDB_USER"]
  end
  if ENV["COUCHDB_PASSWORD"].nil?
    puts "WARNING: COUCHDB_PASSWORD env variable is not set, setting it to a random string"
    @secrets[:couchdb_password] = SecureRandom.hex
  else
    @secrets[:couchdb_password] = ENV["COUCHDB_PASSWORD"]
  end
  if ENV["ERLANG_COOKIE"].nil?
    puts "WARNING: ERLANG_COOKIE env variable is not set, setting it to a random string"
    @secrets[:erlang_cookie] = SecureRandom.hex
  else
    @secrets[:erlang_cookie] = ENV["ERLANG_COOKIE"]
  end
end

SOURCE_FILES = FileList.new("*.erb")
DEST_FILES = SOURCE_FILES.ext(".yml")
DEST_FILES_WITH_PATH = SOURCE_FILES.ext(".yml").map { |f| File.join(DEPLOY_OUT_DIR, f) }

desc "Generate GPII component configs for cluster"
task :generate => [DEPLOY_OUT_DIR, "Rakefile", :setup_versions, :setup_secrets, :setup_prereqs_output] + DEST_FILES do
  cp FileList.new("./*.yml"), "#{DEPLOY_OUT_DIR}/"
end

rule ".yml" => ".erb" do |t|
  rendered = ERB.new(File.read(t.source)).result(binding)
  File.open(File.join(DEPLOY_OUT_DIR, t.name), "w") do |f|
    f.puts rendered
  end
end
CLEAN << DEPLOY_OUT_DIR


# vim: ts=2 sw=2:
