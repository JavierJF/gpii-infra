apiVersion: batch/v1beta1
kind: CronJob
metadata:
  namespace: {{ .Release.Namespace | quote }}
  name: {{ template "flushtokens.name" . }}
spec:
  schedule: "*/15 * * * *"
  concurrencyPolicy: Allow
  startingDeadlineSeconds: 200
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: {{ template "flushtokens.name" . }}
        spec:
          shareProcessNamespace: true
          containers:
          - name: gpii-flushtokens
            image: "{{ .Values.image.repository }}@{{ .Values.image.checksum }}"
            command: [ "/bin/sh", "-c", "-x", "/app/scripts/dockerDeleteExpiredAccessTokens.sh" ]
            env:
            - name: GPII_COUCHDB_URL
              value: '{{ .Values.couchdbUrl }}'
            # Use '--deleteAll' to delete all of the access tokens
            - name: DELETE_ALL
              value: 'false'
          - name: istio-proxy-manager
            image: gcr.io/gke-release/istio/proxyv2:1.0.6-gke.3@sha256:1f6dac3dbf69c0b0d519398003b6572e0218f695f1be295a2ffff95df2395ed0
            securityContext:
              allowPrivilegeEscalation: false
              runAsUser: 1337
            command: [ "/bin/sh", "-c", "for i in `seq 1 30`; do ps -C 'dockerDeleteExpiredAccessTokens.sh' > /dev/null; if [ $? = 0 ]; then echo 'dockerDeleteExpiredAccessTokens.sh started.'; break; fi; sleep 2; done; for i in `seq 1 30`; do ps -C 'dockerDeleteExpiredAccessTokens.sh' > /dev/null; if [ $? != 0 ]; then echo 'dockerDeleteExpiredAccessTokens.sh finished'; break; fi;  echo 'Waiting for dockerDeleteExpiredAccessTokens.sh to finish...'; sleep 2; done; echo 'sending TERM to pilot-agent'; kill `pgrep pilot-agent`" ]
          restartPolicy: OnFailure
